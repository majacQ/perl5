#!/usr/bin/perl

# Usage:  manisort [-q] [-o outfile] [filename]
#
# Without 'filename', looks for MANIFEST in the current dir.
# With '-o outfile', writes the sorted MANIFEST to the specified file.
# Prints the result of the sort to stderr.  '-q' silences this.
# The exit code for the script is the sort result status
# (i.e., 0 means already sorted properly, 1 means not properly sorted)

use strict;
use warnings;
$| = 1;

# Get command line options
use Getopt::Long qw(GetOptions);
use Pod::Usage qw(pod2usage);
require "./Porting/manifest_lib.pl";
my $man = 0;
my $help = 0;
my $outfile;
my $fixfile;
my $quiet;
GetOptions(
    'output=s' => \$outfile,
    'fix=s'    => \$fixfile,
    'quiet!'   => \$quiet,
    'help|?'   => \$help,
    'man'      => \$man
) or pod2usage(2);
pod2usage(42) if $help;
pod2usage(-verbose => 2,exitval=>42) if $man;

my $file = (@ARGV) ? shift : $fixfile ? $fixfile : 'MANIFEST';

if ($fixfile) {
    $outfile //= $fixfile;
    $quiet //= 1;
}

# Read in the MANIFEST file
open(my $IN, '<', $file)
    or die("Can't read '$file': $!");
my @manifest = <$IN>;
close($IN) or die($!);
chomp(@manifest);

my %seen= ( '' => 1 ); # filter out blank lines
my @sorted = grep { !$seen{$_}++ }
             sort_manifest(@manifest)
;

# Check if the file is sorted or not
my $exit_code = 0;
for (my $ii = 0; $ii < $#manifest; $ii++) {
    next if ($manifest[$ii] eq $sorted[$ii]);
    $exit_code = 1;   # Not sorted
    last;
}

# Output sorted file
if (defined($outfile)) {
    open(my $OUT, '>', $outfile)
        or die("Can't open output file '$outfile': $!");
    binmode($OUT);
    print($OUT join("\n", @sorted), "\n");
    close($OUT) or die($!);
}

# Report on sort results
printf(STDERR "'$file' is%s sorted properly\n",
            (($exit_code) ? ' NOT' : '')) if (! $quiet);

# Exit with the sort results status
exit($exit_code);

__END__

=head1 NAME

manisort - Sort MANIFEST files according to the Perl sort order conventions

=head1 SYNOPSIS

manisort [options] [MANIFEST_FILE]

 Options:
   --help               brief help message
   --man                full documentation
   --quiet              do not output a message if the file is not sorted
   --noquiet            output a message if file is not sorted
   --output=FILE        specify file to write to
   --fix=FILE           quietly fix the specified file


=head1 OPTIONS

=over 4

=item B<--help>

Print a brief help message and exits with an exit code of 42.

=item B<--man>

Prints the manual page and exits with an exit code of 42.

=item B<--quiet>

Do not output any status messages during processing.

=item B<--noquiet>

Output a message if the specified MANIFEST_FILE is not already sorted.

=item B<--output=FILE>

Write the sorted results to the specified FILE. If this option is
not provided the tool checks the sort order of a file only.

=item B<--fix=FILE>

Read this file, sort it, and write it back. Quietly by default. Using
this option alone is equivalent to:

    manisort --quiet --output=FILE FILE

Can be combined with the B<--noquiet> or B<--output> options, in which
case it is an alternative way to specify the MANIFEST_FILE.

=back

=head1 DESCRIPTION

B<manisort> is used to verify the sort order and/or fix the sort order
of the F<MANIFEST> file and F<Porting/MANIFEST.dev> files included in
the Perl project. The sort order is similar to dictionary sort order
(alphabetical case insensitive) but where path components and extensions
are sorted independently such that the following files would be sorted
into the following order:

    Configure
    configure
    lib/Foo/Bar
    lib/Foo/Bar.pm
    lib/Foo/Bar/Alpha.pm
    lib/Foo-Alpha/Baz

When provided with no options or arguments the B<manisort> operates on
the F<MANIFEST> in the root directory of the project. This may be
overriden by providing a MANIFEST_FILE argument.

If the file is already sorted correctly the tool will output nothing and
return an exit code of 0. If the file is B<not> already sorted then a
message will be printed to STDERR and it will return an exit code of 1.
The output message may be suppressed with the B<--quiet> option.

If the B<--output=FILE> option is provided the sorted version of the
file will be written to the specified FILE. The FILE and MANIFEST_FILE
arguments may be the same, the file will be read first and then output.

If the B<--fix=FILE> option is provided then it is roughly
equivalent to saying

    manisort --quiet --output=FILE FILE

except that it can also be combined with the B<--noquiet> or B<--output>
arguments, in which case it provides an alternative way to specify the
MANIFEST_FILE argument.

=head1 SEE ALSO

F<Porting/manifest_lib.pm> - the code that does the sorting.

F<t/porting/manifest.t> - test manifest files are well formed.

F<Porting/manicheck> - find missing or superfluous files in manifests.

=cut
